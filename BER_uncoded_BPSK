import numpy as np
from scipy import special
import matplotlib.pyplot as plt
#BER of BPSK= Q(sqrt(2E_b/N_0))=0.5* erfc(sqrt(E_b/N_0))=0.5*(1-erf(sqrt(E_b/N_0)))
#Define Q function intems of error function
def Q(x):
  #Q(x)=0.5*erfc(x/sqrt(2))=0.5*(1-erf(x/sqrt(2)))
  return 0.5*(1-special.erf(x/np.sqrt(2)))

#Theoritical BER of uncoded bpsk
Eb_N0_db=np.linspace(0,12,101);
R=1;#uncoded
Eb_N0=10**(Eb_N0_db/10)
SNR=2*Eb_N0;
#BER of BPSK=Q(sqrt(SNR))
ber=Q(np.sqrt(SNR))


#BER of bpsk pratical for one Eb_No
def Decode(y):
  y_hat=np.array([])
  for i in y:
    if i<0:
      y_hat=np.append(y_hat, 1)
    else:
     y_hat=np.append(y_hat, 0)
  return y_hat

def Error(msg,y_hat):
  y_err=np.array([])
  for i in range(len(msg)):
    if msg[i] ==y_hat[i]:
      y_err=np.append(y_err, 0)
    else:
      y_err=np.append(y_err, 1)
  return y_err




BER_p=np.array([])
for Eb_N0_dbp in Eb_N0_db: 
  Eb_N0p=10**(Eb_N0_dbp/10)
  sigma=np.sqrt(1/(2*R*Eb_N0p))
  N=10000 #number of message symbols
  msg=np.random.randint(2,size=N)
  x=1-2*msg #convert 0,1s to -1,1s
  n=np.random.normal(0, sigma, size=N)
  y=x+n #Received vector
  y_hat=Decode(y)
  #print(x, y)
  y_error=Error(msg,y_hat)
  #print(msg, y_hat)
  Total_errors=np.sum(y_error)
  BER_p=np.append(BER_p,Total_errors/N)


plt.figure()
plt.subplot(1,2,1)
plt.plot(Eb_N0_db,ber)
plt.xlabel("Eb/N0")
plt.ylabel("BER")
plt.grid()
plt.title("Theoritical BER")

plt.subplot(1,2,2)
plt.plot(Eb_N0_db,BER_p)
plt.xlabel("Eb/N0")
plt.ylabel("BER")
plt.grid()
plt.title("Practical BER")

plt.show()
