import numpy as np
from scipy import special
import matplotlib.pyplot as plt
class Bpsk():
  def __int__():
    pass
  def Source(N):
    msg=np.random.randint(2,size=N)
    return msg
  
  def Modulator(msg):
    return 1-2*msg

  def AWGN(sigma, N):
    return np.random.normal(0, sigma, size=N)

  def Decode(y):
    y_hat=np.array([])
    for i in y:
      if i<0:
        y_hat=np.append(y_hat, 1)
      else:
        y_hat=np.append(y_hat, 0)
    return y_hat

  def Error(msg,y_hat):
    y_err=np.array([])
    for i in range(len(msg)):
      if msg[i] ==y_hat[i]:
        y_err=np.append(y_err, 0)
      else:
        y_err=np.append(y_err, 1)
    return y_err
  def repetition_code(msg,R):
    msg_rep=np.array([])
    for i in msg:
      for j in range(R):
        msg_rep=np.append(msg_rep,i)
    return msg_rep
  def hard_repetition_decode(y,R):
    y_dec=np.array([])
    for i in range(0,len(y),R):
      if np.sum(y[i:i+R-1])>(R/2):
        y_dec=np.append(y_dec,1)
      else:
        y_dec=np.append(y_dec,0)
    return y_dec
  def soft_repetition_decode(y,R):
    y_dec=np.array([])
    for i in range(0,len(y),R):
      if np.sum(y[i:i+R-1])>0:
        y_dec=np.append(y_dec,0)
      else:
        y_dec=np.append(y_dec,1)
    return y_dec
    
  
#coding rate r=(1/3), R=1/r
R=3
Eb_N0_db=np.linspace(0,12,51);
Eb_N0=10**(Eb_N0_db/10)



#BER of bpsk pratical for one Eb_No





BER_p=np.array([])
hard_BER_p_rep=np.array([])
soft_BER_p_rep=np.array([])
for Eb_N0_dbp in Eb_N0_db: 
  Eb_N0p=10**(Eb_N0_dbp/10)
  sigma=np.sqrt(1/(2*Eb_N0p)) #uncoded
  sigma_R=np.sqrt(R/(2*Eb_N0p)) #coded
  N=10000 #number of message symbols
  msg=Bpsk.Source(N)
  msg_rep=Bpsk.repetition_code(msg,R)
  x=Bpsk.Modulator(msg) #convert 0,1s to 1,-1s
  x_rep=Bpsk.Modulator(msg_rep) #Codewords
  n=Bpsk.AWGN(sigma, N)
  n_rep=Bpsk.AWGN(sigma_R, R*N)
  y=x+n #Received vector
  y_rep=x_rep+n_rep
  y_hat=Bpsk.Decode(y)
  y_hard_hat_rep=Bpsk.Decode(y_rep)
  y_hat_hard_rep_dec=Bpsk.hard_repetition_decode(y_hard_hat_rep, R)
  y_hat_soft_rep_dec=Bpsk.soft_repetition_decode(y_rep, R)
  #print(x, y)
  y_error=Bpsk.Error(msg,y_hat)
  y_error_hard_rep=Bpsk.Error(msg,y_hat_hard_rep_dec)
  y_error_soft_rep=Bpsk.Error(msg,y_hat_soft_rep_dec)
  #print(msg, y_hat)
  Total_errors=np.sum(y_error)
  Total_errors_hard_rep=np.sum(y_error_hard_rep)
  Total_errors_soft_rep=np.sum(y_error_soft_rep)
  BER_p=np.append(BER_p,Total_errors/N)
  hard_BER_p_rep=np.append(hard_BER_p_rep,Total_errors_hard_rep/(N))
  soft_BER_p_rep=np.append(soft_BER_p_rep,Total_errors_soft_rep/(N))


plt.figure()
plt.plot(Eb_N0_db,BER_p, Eb_N0_db,hard_BER_p_rep, Eb_N0_db,soft_BER_p_rep)
plt.xlabel("Eb/N0")
plt.ylabel("BER")
plt.grid()
plt.title("BER coded vs uncoded")
plt.legend(['Uncoded', 'HardDecsion Rep Code r=1/3', 'SoftDecsion Rep Code r=1/3'])

plt.show()
